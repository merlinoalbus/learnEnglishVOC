NOME FILE: C:\Users\rober\OneDrive\Desktop\Vocabolario Inglese\learnEnglishVOC\src\contexts\AppContext.js

import React, { createContext, useContext, useReducer, useEffect } from 'react'; import { useOptimizedWords } from '../hooks/useOptimizedWords'; import { useOptimizedTest } from '../hooks/useOptimizedTest'; import { useOptimizedStats } from '../hooks/useOptimizedStats';  const AppContext = createContext();  const initialState = {   currentView: 'main',   showWordsList: true,   editingWord: null,   showChapterSelector: false,   confirmDelete: null,   showConfirmClear: false };  const appReducer = (state, action) => {   switch (action.type) {     case 'SET_VIEW':       return { ...state, currentView: action.payload };     case 'TOGGLE_WORDS_LIST':       return { ...state, showWordsList: !state.showWordsList };     case 'SET_EDITING_WORD':       return { ...state, editingWord: action.payload };     case 'SET_SHOW_CHAPTER_SELECTOR':       return { ...state, showChapterSelector: action.payload };     case 'SET_CONFIRM_DELETE':       return { ...state, confirmDelete: action.payload };     case 'SET_SHOW_CONFIRM_CLEAR':       return { ...state, showConfirmClear: action.payload };     case 'RESET_MODALS':       return {         ...state,         confirmDelete: null,         showConfirmClear: false,         showChapterSelector: false       };     default:       return state;   } };  export const AppProvider = ({ children }) => {   const [state, dispatch] = useReducer(appReducer, initialState);      // Hook centralizzati   const wordsAPI = useOptimizedWords();   const statsAPI = useOptimizedStats();      // ⭐ ENHANCED: Test API with proper stats callback   const testAPI = useOptimizedTest((testStats, testWords, wrongWords) => {          // ⭐ CRITICAL: Pass enhanced stats including hints and timing     statsAPI.handleTestComplete(testStats, testWords, wrongWords);   });    // Sincronizzazione con editing word globale   useEffect(() => {     wordsAPI.setEditingWord(state.editingWord);   }, [state.editingWord]);    // ⭐ DEBUG: Log quando le funzioni stats sono disponibili   useEffect(() => {   }, [statsAPI.getAllWordsPerformance, statsAPI.getWordAnalysis, statsAPI.wordPerformance]);    const value = {     // Stato UI     ...state,     dispatch,          // API Words - ⭐ ENHANCED: Added difficult toggle and forceRefresh     words: wordsAPI.words,     addWord: wordsAPI.addWord,     removeWord: wordsAPI.removeWord,     toggleWordLearned: wordsAPI.toggleWordLearned,     toggleWordDifficult: wordsAPI.toggleWordDifficult,     clearAllWords: wordsAPI.clearAllWords,     importWords: wordsAPI.importWords,     forceRefresh: wordsAPI.forceRefresh, // ⭐ NEW: Expose force refresh     getAvailableChapters: wordsAPI.getAvailableChapters,     getChapterStats: wordsAPI.getChapterStats,     wordStats: wordsAPI.wordStats,          // API Test - ⭐ ENHANCED: With timer and hints     ...testAPI,          // API Stats - ⭐ FIXED: Properly expose word performance functions     stats: statsAPI.stats,     testHistory: statsAPI.testHistory,     wordPerformance: statsAPI.wordPerformance,     calculatedStats: statsAPI.calculatedStats,     updateTestStats: statsAPI.updateTestStats,     addTestToHistory: statsAPI.addTestToHistory,     clearHistoryOnly: statsAPI.clearHistoryOnly,     refreshData: statsAPI.refreshData,     forceUpdate: statsAPI.forceUpdate,     resetStats: statsAPI.resetStats,     exportStats: statsAPI.exportStats,     importStats: statsAPI.importStats,          // ⭐ CRITICAL: Word performance functions     getAllWordsPerformance: statsAPI.getAllWordsPerformance,     getWordAnalysis: statsAPI.getWordAnalysis,     recordWordPerformance: statsAPI.recordWordPerformance   };    return (     <AppContext.Provider value={value}>       {children}     </AppContext.Provider>   ); };  export const useAppContext = () => {   const context = useContext(AppContext);   if (!context) {     throw new Error('useAppContext must be used within AppProvider');   }   return context; };

================================================================================

NOME FILE: C:\Users\rober\OneDrive\Desktop\Vocabolario Inglese\learnEnglishVOC\src\contexts\NotificationContext.js

import React, { createContext, useContext, useReducer, useCallback } from 'react';  const NotificationContext = createContext();  const notificationReducer = (state, action) => {   switch (action.type) {     case 'ADD_NOTIFICATION':       return {         ...state,         notifications: [...state.notifications, action.payload]       };     case 'REMOVE_NOTIFICATION':       return {         ...state,         notifications: state.notifications.filter(n => n.id !== action.payload)       };     case 'CLEAR_ALL':       return { ...state, notifications: [] };     default:       return state;   } };  const getUserFriendlyError = (errorMessage, context) => {   const errorMap = {     'JSON': '❌ File JSON non valido',     'localStorage': '❌ Errore salvataggio dati',     'Network': '❌ Errore di connessione',     'Word already exists': '⚠️ Parola già esistente',     'English word and Italian translation are required': '⚠️ Campi obbligatori mancanti',     'All words already exist': '⚠️ Tutte le parole sono già presenti'   };    for (const [key, message] of Object.entries(errorMap)) {     if (errorMessage.includes(key)) {       return message;     }   }    return `❌ Errore ${context}: ${errorMessage}`; };  export const NotificationProvider = ({ children }) => {   const [state, dispatch] = useReducer(notificationReducer, {     notifications: []   });    const showNotification = useCallback((message, type = 'success', duration = 3000) => {     const id = Date.now() + Math.random();          dispatch({       type: 'ADD_NOTIFICATION',       payload: { id, message, type, timestamp: Date.now() }     });      setTimeout(() => {       dispatch({ type: 'REMOVE_NOTIFICATION', payload: id });     }, duration);      return id;   }, []);    const showError = useCallback((error, context = '') => {     console.error(`❌ Error in ${context}:`, error);          const errorMessage = error.message || error.toString();     const userFriendlyMessage = getUserFriendlyError(errorMessage, context);          return showNotification(userFriendlyMessage, 'error', 5000);   }, [showNotification]);    const showSuccess = useCallback((message) => {     return showNotification(message, 'success');   }, [showNotification]);    const showWarning = useCallback((message) => {     return showNotification(message, 'warning', 4000);   }, [showNotification]);    const value = {     notifications: state.notifications,     showNotification,     showError,     showSuccess,     showWarning,     clearAllNotifications: useCallback(() => {       dispatch({ type: 'CLEAR_ALL' });     }, [])   };    return (     <NotificationContext.Provider value={value}>       {children}     </NotificationContext.Provider>   ); };  export const useNotification = () => {   const context = useContext(NotificationContext);   if (!context) {     throw new Error('useNotification must be used within NotificationProvider');   }   return context; };

================================================================================

