NOME FILE: appConstants.ts

// ===================================================== // 📁 src/constants/appConstants.ts - Type-Safe Constants // =====================================================  import type { WordCategory, CategoryStyle } from '../types/global'; import type {    ApplicationConfig,   ErrorMessages,   SuccessMessages } from '../types/config';  // Import the type-safe configuration import AppConfig, {    ERROR_MESSAGES as CONFIG_ERROR_MESSAGES,   SUCCESS_MESSAGES as CONFIG_SUCCESS_MESSAGES  } from '../config/appConfig';  // ====== PREDEFINED CATEGORIES (with type safety) ====== export const CATEGORIES: readonly WordCategory[] = [   'VERBI',    'VERBI_IRREGOLARI',    'SOSTANTIVI',    'AGGETTIVI',   'DESCRIZIONI_FISICHE',    'POSIZIONE_CORPO',    'EMOZIONI',   'EMOZIONI_POSITIVE',    'EMOZIONI_NEGATIVE',    'LAVORO',   'FAMIGLIA',    'TECNOLOGIA',    'VESTITI' ] as const;  // ====== CATEGORY STYLES (with complete type safety) ====== export const CATEGORY_STYLES: Record<WordCategory | 'DEFAULT', CategoryStyle> = {   'VERBI': {      color: 'from-red-400 via-red-500 to-red-600',      icon: '⚡',      bgColor: 'bg-red-500',     bgGradient: 'bg-gradient-to-br from-red-500 to-orange-600'   },   'VERBI_IRREGOLARI': {      color: 'from-red-500 via-red-600 to-red-700',      icon: '🔄',      bgColor: 'bg-red-600',     bgGradient: 'bg-gradient-to-br from-red-600 to-pink-600'   },   'SOSTANTIVI': {      color: 'from-blue-400 via-blue-500 to-blue-600',      icon: '🏷️',      bgColor: 'bg-blue-500',     bgGradient: 'bg-gradient-to-br from-blue-500 to-indigo-600'   },   'AGGETTIVI': {      color: 'from-green-400 via-green-500 to-green-600',      icon: '🎨',      bgColor: 'bg-green-500',     bgGradient: 'bg-gradient-to-br from-green-500 to-emerald-600'   },   'DESCRIZIONI_FISICHE': {      color: 'from-teal-400 via-teal-500 to-teal-600',      icon: '👤',      bgColor: 'bg-teal-500',     bgGradient: 'bg-gradient-to-br from-teal-500 to-cyan-600'   },   'POSIZIONE_CORPO': {      color: 'from-purple-400 via-purple-500 to-purple-600',      icon: '🧘',      bgColor: 'bg-purple-500',     bgGradient: 'bg-gradient-to-br from-purple-500 to-violet-600'   },   'EMOZIONI': {      color: 'from-pink-400 via-pink-500 to-pink-600',      icon: '❤️',      bgColor: 'bg-pink-500',     bgGradient: 'bg-gradient-to-br from-pink-500 to-rose-600'   },   'EMOZIONI_POSITIVE': {      color: 'from-yellow-400 via-yellow-500 to-orange-500',      icon: '😊',      bgColor: 'bg-yellow-500',     bgGradient: 'bg-gradient-to-br from-yellow-400 to-orange-500'   },   'EMOZIONI_NEGATIVE': {      color: 'from-gray-400 via-gray-500 to-gray-600',      icon: '😔',      bgColor: 'bg-gray-500',     bgGradient: 'bg-gradient-to-br from-gray-500 to-slate-600'   },   'LAVORO': {      color: 'from-indigo-400 via-indigo-500 to-indigo-600',      icon: '💼',      bgColor: 'bg-indigo-500',     bgGradient: 'bg-gradient-to-br from-indigo-500 to-blue-600'   },   'FAMIGLIA': {      color: 'from-pink-300 via-pink-400 to-rose-500',      icon: '👨‍👩‍👧‍👦',      bgColor: 'bg-pink-400',     bgGradient: 'bg-gradient-to-br from-pink-400 to-rose-500'   },   'TECNOLOGIA': {      color: 'from-cyan-400 via-cyan-500 to-blue-500',      icon: '💻',      bgColor: 'bg-cyan-500',     bgGradient: 'bg-gradient-to-br from-cyan-500 to-blue-500'   },   'VESTITI': {      color: 'from-purple-300 via-purple-400 to-pink-500',      icon: '👕',      bgColor: 'bg-purple-400',     bgGradient: 'bg-gradient-to-br from-purple-400 to-pink-500'   },   'DEFAULT': {      color: 'from-emerald-400 via-emerald-500 to-cyan-500',      icon: '📚',      bgColor: 'bg-emerald-500',     bgGradient: 'bg-gradient-to-br from-emerald-500 to-cyan-600'   } } as const;  // ====== TYPE-SAFE CONFIGURATION EXPORTS ====== // These maintain backward compatibility with existing code // but now import from type-safe configuration  export const APP_CONFIG: ApplicationConfig['app'] = AppConfig.app; export const AI_CONFIG: ApplicationConfig['ai'] = AppConfig.ai; export const TEST_CONFIG: ApplicationConfig['test'] = AppConfig.test; export const STATS_CONFIG: ApplicationConfig['stats'] = AppConfig.stats; export const STORAGE_CONFIG: ApplicationConfig['storage'] = AppConfig.storage; export const WORD_CONFIG: ApplicationConfig['word'] = AppConfig.word; export const UI_CONFIG: ApplicationConfig['ui'] = AppConfig.ui;  // Re-export messages with type safety export const ERROR_MESSAGES: ErrorMessages = CONFIG_ERROR_MESSAGES; export const SUCCESS_MESSAGES: SuccessMessages = CONFIG_SUCCESS_MESSAGES;  // ====== TYPE GUARDS ======  /**  * Type guard to check if a string is a valid WordCategory  */ export const isValidCategory = (category: string): category is WordCategory => {   return (CATEGORIES as readonly string[]).includes(category); };  /**  * Type guard to check if a category style exists  */ export const hasCategoryStyle = (category: string): category is keyof typeof CATEGORY_STYLES => {   return category in CATEGORY_STYLES; };  // ====== UTILITY TYPES ======  /**  * Union type of all available category keys  */ export type AvailableCategoryKey = keyof typeof CATEGORY_STYLES;  /**  * Union type of all category icons  */ export type CategoryIcon = typeof CATEGORY_STYLES[keyof typeof CATEGORY_STYLES]['icon'];  // ====== MIGRATION NOTE WITH TYPE SAFETY ====== /**  * 🔐 SECURITY: API key removed from this file!  *   * MIGRATION TO TYPESCRIPT COMPLETE ✅  *   * CHANGES:  * 1. ✅ Full type safety for all constants  * 2. ✅ Type guards for runtime validation  * 3. ✅ Readonly arrays to prevent mutations  * 4. ✅ Const assertions for literal types  * 5. ✅ API key now from environment variable  * 6. ✅ Backward compatibility maintained  *   * SETUP REQUIRED:  * 1. Copy: cp .env.example .env.local  * 2. Add your API key to .env.local  * 3. Restart: npm start  *   * Your existing code will work identically, but now with type safety!  */  // Development type checking if (AppConfig.app.environment === 'development') {   // Type checking verification   const _typeTest: WordCategory = 'VERBI'; // This will error if type is wrong   const _styleTest: CategoryStyle = CATEGORY_STYLES.VERBI; // This will error if type is wrong      console.log('✅ TypeScript constants loaded successfully:', {     categoriesCount: CATEGORIES.length,     stylesCount: Object.keys(CATEGORY_STYLES).length,     apiConfigured: !!AppConfig.ai.apiKey,     typeChecking: 'Active'   });      if (!AppConfig.ai.apiKey) {     console.error(       '🔴 SETUP REQUIRED: Aggiungi la tua API key in .env.local\n' +       'REACT_APP_GEMINI_API_KEY=your_api_key_here'     );   } }

================================================================================

