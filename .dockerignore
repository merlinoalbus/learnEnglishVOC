# =====================================================
# 📁 .dockerignore - SPIEGAZIONE COMPLETA FOR DUMMY
# =====================================================
# SCOPO: È il ".gitignore per Docker" - dice cosa NON copiare nel container
# ANALOGIA: Come una lista di "cose da non mettere in valigia quando viaggi"

# ====== COS'È .dockerignore ======
# 
# DOCKER BUILD PROCESS:
# 1. Docker legge Dockerfile
# 2. Crea "build context" (copia tutto dalla directory corrente)
# 3. .dockerignore esclude file da questo context
# 4. COPY . . nel Dockerfile usa solo file NON esclusi
#
# BENEFICI:
# ✅ Build più veloce (meno file da copiare)
# ✅ Sicurezza (no credenziali in container)
# ✅ Container più leggero (meno file inutili)
# ✅ Cache migliore (evita invalidazione per file irrilevanti)

# ====== ANALISI DEL TUO FILE ======

# 🔐 SECURITY: Credenziali e file sensibili
.env
.env.*
!.env.example
*.key
*.pem
*.crt
secrets/
credentials/

# 🎯 SPIEGAZIONE:
# .env: File con API keys (CRITICAL!)
# .env.*: Tutti i file environment (.env.local, .env.production, etc.)
# !.env.example: ECCEZIONE - include il template (sicuro)
# *.key, *.pem, *.crt: Certificati SSL/chiavi private
# secrets/, credentials/: Cartelle con dati sensibili
#
# 🚨 PERCHÉ IMPORTANTE:
# Se questi file finiscono nel container, sono VISIBILI a chiunque
# abbia accesso all'immagine Docker! Grave rischio sicurezza.

# 📁 Development files
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.node_repl_history

# 🎯 SPIEGAZIONE:
# node_modules/: Dependencies npm (HUGE! ~500MB+)
# *-debug.log: Log di debug development
# .npm: Cache npm locale
# .node_repl_history: Cronologia Node.js REPL
#
# 💡 PERCHÉ ESCLUDERE:
# node_modules viene reinstallato nel container con npm ci
# Log e cache non servono in production
# Riduce build context da ~500MB a ~50MB!

# 🏗️ Build outputs
build/
dist/
coverage/
.nyc_output/

# 🎯 SPIEGAZIONE:
# build/: Output React build (generato durante Docker build)
# dist/: Output build alternativi
# coverage/: Report coverage test
# .nyc_output/: Tool coverage Istanbul
#
# 💡 PERCHÉ ESCLUDERE:
# Build viene rifatto nel container
# Coverage solo per development
# Evita conflitti tra build locale e container

# 📚 Git e Version Control
.git/
.gitignore
.gitattributes
*.md
!README.md

# 🎯 SPIEGAZIONE:
# .git/: Repository Git completo (può essere HUGE!)
# .gitignore: Configurazione Git
# *.md: File markdown (documentazione)
# !README.md: ECCEZIONE - mantieni README principale
#
# 💡 PERCHÉ ESCLUDERE:
# Container non ha bisogno cronologia Git
# Documentazione non serve in runtime
# .git/ può essere centinaia di MB

# 💻 IDE e Editor files
.vscode/
.idea/
*.swp
*.swo
*~
.DS_Store

# 🎯 SPIEGAZIONE:
# .vscode/, .idea/: Configurazioni IDE
# *.swp, *.swo: File temporanei Vim
# *~: File backup editor
# .DS_Store: File sistema macOS
#
# 💡 PERCHÉ ESCLUDERE:
# IDE config sono personali
# File temporanei non servono
# File OS sono system-specific

# 🧪 Testing e Development
.coverage/
jest/
__tests__/
*.test.js
*.spec.js
cypress/

# 🎯 SPIEGAZIONE:
# Testing files e directories
# Coverage reports
# E2E test configs
#
# 💡 PERCHÉ ESCLUDERE:
# Production container non esegue test
# Riduce dimensioni
# Test già eseguiti in CI/CD

# 🐳 Docker files
Dockerfile*
docker-compose*
.dockerignore

# 🎯 SPIEGAZIONE:
# Dockerfile, Dockerfile.dev: Build instructions
# docker-compose.yml: Orchestrazione
# .dockerignore: Questo file stesso!
#
# 💡 PERCHÉ ESCLUDERE:
# Container non ha bisogno dei suoi build instructions
# Evita loops infiniti
# Sicurezza (nasconde configurazione Docker)

# 🔄 CI/CD
.github/
.gitlab-ci.yml
.travis.yml
.circleci/

# 🎯 SPIEGAZIONE:
# GitHub Actions workflows
# GitLab CI configuration
# Travis CI, CircleCI configs
#
# 💡 PERCHÉ ESCLUDERE:
# CI/CD configs non servono in runtime
# Possono contenere informazioni sensibili
# Container deve essere environment-agnostic

# 📖 Documentation
docs/
SECURITY_SETUP.md
INTEGRATION_GUIDE.md
DOCKER_DEPLOYMENT.md

# 🎯 SPIEGAZIONE:
# Documentazione progetto
# Guide setup e deployment
#
# 💡 PERCHÉ ESCLUDERE:
# Documentazione non serve in production runtime
# Riduce dimensioni container
# Informazioni potrebbero essere sensibili

# 📦 Package manager files
yarn.lock
.pnpm-debug.log*

# 🎯 SPIEGAZIONE:
# yarn.lock: Lock file Yarn
# .pnpm-debug.log: Debug log pnpm
#
# 💡 NOTA IMPORTANTE:
# package-lock.json NON è escluso!
# È necessario per npm ci nel container

# 📜 Scripts di sviluppo
scripts/
!scripts/config-status.js

# 🎯 SPIEGAZIONE:
# scripts/: Cartella con script development
# !scripts/config-status.js: ECCEZIONE - mantieni questo script
#
# 💡 PERCHÉ ECCEZIONE:
# config-status.js probabilmente usato in container
# per health check o configurazione

# ====== CONFRONTO DIMENSIONI ======
#
# 📊 SENZA .dockerignore:
# - Build context: ~800MB (node_modules + .git + build + docs)
# - Tempo build: 2-5 minuti
# - Network transfer: Tutto il context
#
# 📊 CON .dockerignore:
# - Build context: ~20MB (solo source code necessario)  
# - Tempo build: 30 secondi - 1 minuto
# - Network transfer: Solo file essenziali
#
# 🚀 MIGLIORAMENTO: 97% riduzione dimensioni!

# ====== BEST PRACTICES IMPLEMENTATE ======
#
# ✅ SECURITY FIRST:
# - Nessun file credenziali
# - Nessun certificato o chiave
# - Nessun file environment con API keys
#
# ✅ PERFORMANCE:
# - Build context minimale
# - Cache Docker ottimizzata
# - Transfer network ridotto
#
# ✅ PRODUCTION READY:
# - Solo file runtime necessari
# - Nessun tool development
# - Nessun test o documentazione
#
# ✅ MANTAINABILITY:
# - Commenti chiari
# - Sezioni organizzate
# - Eccezioni documentate

# ====== COME TESTARE ======
#
# 🔍 VERIFICA COSA VIENE COPIATO:
# docker build --no-cache -t test-context .
# docker run --rm test-context ls -la
#
# 📊 MISURA BUILD CONTEXT:
# docker build --progress=plain . 2>&1 | grep "transferring context"
#
# 🐳 ISPEZIONA CONTAINER:
# docker run --rm -it test-context sh
# ls -la  # Dovrebbe mostrare solo file necessari

# ====== POSSIBILI MIGLIORAMENTI ======
#
# 🔧 SE VUOI OTTIMIZZARE ULTERIORMENTE:
#
# # Escludi più file development
# *.test.ts
# *.test.tsx
# *.spec.ts  
# *.spec.tsx
# __mocks__/
#
# # Escludi configurazioni specifiche
# .eslintrc.*
# .prettierrc.*
# babel.config.*
# jest.config.*
#
# # Ma ATTENZIONE: alcuni potrebbero essere necessari per build!

# ====== CONCLUSIONE ======
#
# 🏆 IL TUO .dockerignore È ECCELLENTE:
# ✅ Sicurezza ottimale
# ✅ Performance massimizzata  
# ✅ Production-ready
# ✅ Ben documentato
# ✅ Best practices seguite
#
# 👌 NON SERVONO MODIFICHE
# È già configurato perfettamente per il tuo progetto React/TypeScript!

# ====== COMANDO FINALE TEST ======
# docker build --progress=plain --no-cache -t vocabulary-test . 2>&1 | grep -E "(transferring|COPY)"
# Dovrebbe mostrare context size ridotto e copy veloci