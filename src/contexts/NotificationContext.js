// =====================================================
// üìÅ src/contexts/NotificationContext.js - SISTEMA NOTIFICHE GLOBALI
// =====================================================
// üéØ SCOPO: Context specializzato per gestire notifiche toast in tutta l'app.
//          Fornisce API semplice per mostrare messaggi di successo, errore, warning.
//          Gestisce automaticamente timing, stacking e cleanup delle notifiche.

import React, {
  createContext,
  useContext,
  useReducer,
  useCallback,
} from "react";

// =====================================================
// üèóÔ∏è SETUP CONTEXT REACT
// =====================================================

// üåê CREAZIONE CONTEXT NOTIFICHE
// Context dedicato esclusivamente alla gestione delle notifiche
// Separato da AppContext per evitare re-render non necessari
const NotificationContext = createContext();

// =====================================================
// üîÑ REDUCER PER GESTIONE STATO NOTIFICHE
// =====================================================

// üéØ REDUCER PATTERN: Gestione stato notifiche immutabile
// VANTAGGI: Prevedibilit√†, debugging, time-travel, performance
const notificationReducer = (state, action) => {
  switch (action.type) {
    // ‚ûï AGGIUNGI NUOVA NOTIFICA
    case "ADD_NOTIFICATION":
      // LOGICA: Aggiungi nuova notifica alla fine dell'array
      // IMMUTABILIT√Ä: Crea nuovo array invece di mutare esistente
      return {
        ...state,
        notifications: [...state.notifications, action.payload],
      };

    // ‚ùå RIMUOVI NOTIFICA SPECIFICA
    case "REMOVE_NOTIFICATION":
      // LOGICA: Filtra array rimuovendo notifica con ID specifico
      // AUTO-DISMISS: Chiamata dopo timeout automatico
      return {
        ...state,
        notifications: state.notifications.filter(
          (n) => n.id !== action.payload
        ),
      };

    // üóëÔ∏è PULISCI TUTTE LE NOTIFICHE
    case "CLEAR_ALL":
      // LOGICA: Reset completo array notifiche
      // USO: Cleanup generale o azione utente esplicita
      return { ...state, notifications: [] };

    default:
      // ‚ö†Ô∏è AZIONE NON RICONOSCIUTA: Ritorna stato immutato
      return state;
  }
};

// =====================================================
// üß† MAPPING ERRORI USER-FRIENDLY
// =====================================================

// üéØ FUNZIONE: Converte errori tecnici in messaggi comprensibili
// SCOPO: Migliorare UX nascondendo dettagli tecnici all'utente
// PATTERN: Error mapping con fallback generico
const getUserFriendlyError = (errorMessage, context) => {
  // üìö DIZIONARIO ERRORI: Mapping errore tecnico ‚Üí messaggio utente
  const errorMap = {
    JSON: "‚ùå File JSON non valido", // Errori parsing JSON
    localStorage: "‚ùå Errore salvataggio dati", // Errori storage browser
    Network: "‚ùå Errore di connessione", // Errori rete/API
    "Word already exists": "‚ö†Ô∏è Parola gi√† esistente", // Duplicati vocabolario
    "English word and Italian translation are required":
      "‚ö†Ô∏è Campi obbligatori mancanti", // Validazione form
    "All words already exist": "‚ö†Ô∏è Tutte le parole sono gi√† presenti", // Import senza novit√†
  };

  // üîç RICERCA PATTERN: Cerca corrispondenza nel messaggio di errore
  for (const [key, message] of Object.entries(errorMap)) {
    if (errorMessage.includes(key)) {
      return message; // ‚úÖ TROVATO: Restituisci messaggio user-friendly
    }
  }

  // üîÑ FALLBACK: Se nessun pattern trovato, mostra errore generico
  return `‚ùå Errore ${context}: ${errorMessage}`;
};

// =====================================================
// üè≠ NOTIFICATION PROVIDER COMPONENT
// =====================================================
// üéØ RESPONSABILIT√Ä:
// 1. Gestire stato globale delle notifiche attive
// 2. Fornire API semplice per tutti i tipi di notifica
// 3. Gestire auto-dismiss con timeout personalizzabili
// 4. Convertire errori tecnici in messaggi user-friendly

export const NotificationProvider = ({ children }) => {
  // üîÑ STATO LOCALE CON REDUCER
  // STRUTTURA: { notifications: Array<{id, message, type, timestamp}> }
  const [state, dispatch] = useReducer(notificationReducer, {
    notifications: [], // üìö Array vuoto iniziale
  });

  // =====================================================
  // üîß FUNZIONE CORE: MOSTRA NOTIFICA GENERICA
  // =====================================================

  // üéØ FUNZIONE PRINCIPALE per creare qualsiasi tipo di notifica
  // useCallback: Memorizza funzione per evitare re-render figli non necessari
  const showNotification = useCallback(
    (message, type = "success", duration = 3000) => {
      // üÜî GENERAZIONE ID UNICO
      // Combina timestamp + random per garantire unicit√†
      // NECESSARIO: Per identificare notifica specifica durante rimozione
      const id = Date.now() + Math.random();

      // üì¶ CREAZIONE OGGETTO NOTIFICA
      const notificationObject = {
        id, // üÜî Identificatore unico
        message, // üìù Testo da mostrare all'utente
        type, // üé® Tipo: 'success' | 'error' | 'warning' | 'info'
        timestamp: Date.now(), // üïí Momento creazione (per debugging/analytics)
      };

      // üì§ DISPATCH: Aggiungi notifica allo stato
      dispatch({
        type: "ADD_NOTIFICATION",
        payload: notificationObject,
      });

      // ‚è∞ AUTO-DISMISS: Rimuovi automaticamente dopo timeout
      setTimeout(() => {
        dispatch({
          type: "REMOVE_NOTIFICATION",
          payload: id, // üéØ Rimuovi questa specifica notifica
        });
      }, duration);

      // üîÑ RETURN ID: Permette rimozione manuale se necessario
      return id;
    },
    []
  ); // üìå DIPENDENZE VUOTE: Funzione stabile, non cambia mai

  // =====================================================
  // üî¥ FUNZIONE SPECIALIZZATA: MOSTRA ERRORE
  // =====================================================

  // üéØ WRAPPER per errori con processing automatico
  // FEATURE: Converte errori tecnici in messaggi user-friendly
  const showError = useCallback(
    (error, context = "") => {
      // üîç DEBUG LOGGING: Log errore completo per sviluppatori
      console.error(`‚ùå Error in ${context}:`, error);

      // üìù ESTRAZIONE MESSAGGIO: Gestisce diversi tipi di errore
      const errorMessage = error.message || error.toString();

      // üîÑ CONVERSIONE USER-FRIENDLY: Usa mapping function
      const userFriendlyMessage = getUserFriendlyError(errorMessage, context);

      // üì§ MOSTRA NOTIFICA: Timeout pi√π lungo per errori (5s vs 3s default)
      return showNotification(userFriendlyMessage, "error", 5000);
    },
    [showNotification]
  ); // üìå DIPENDENZA: Re-crea solo se showNotification cambia

  // =====================================================
  // üü¢ FUNZIONE SPECIALIZZATA: MOSTRA SUCCESSO
  // =====================================================

  // üéØ WRAPPER per messaggi di successo
  // USO: Operazioni completate con successo (salvataggio, import, etc.)
  const showSuccess = useCallback(
    (message) => {
      // üì§ DELEGA: Usa funzione generica con tipo 'success'
      return showNotification(message, "success");
    },
    [showNotification]
  ); // üìå DIPENDENZA: showNotification

  // =====================================================
  // üü° FUNZIONE SPECIALIZZATA: MOSTRA WARNING
  // =====================================================

  // üéØ WRAPPER per avvisi non critici
  // USO: Situazioni che richiedono attenzione ma non bloccanti
  const showWarning = useCallback(
    (message) => {
      // üì§ DELEGA: Timeout intermedio (4s) per warnings
      return showNotification(message, "warning", 4000);
    },
    [showNotification]
  ); // üìå DIPENDENZA: showNotification

  // =====================================================
  // üéÅ API COMPLETA CONTEXT VALUE
  // =====================================================

  // üì¶ OGGETTO VALUE: Tutte le funzioni e stato disponibili ai consumer
  const value = {
    // üìä STATO: Array di notifiche attive
    notifications: state.notifications,

    // üîß FUNZIONI CORE
    showNotification, // üéØ Funzione generica per qualsiasi notifica
    showError, // üî¥ Funzione specializzata per errori
    showSuccess, // üü¢ Funzione specializzata per successi
    showWarning, // üü° Funzione specializzata per warnings

    // üóëÔ∏è FUNZIONE UTILITY: Pulisci tutte le notifiche
    clearAllNotifications: useCallback(() => {
      dispatch({ type: "CLEAR_ALL" });
    }, []), // üìå NESSUNA DIPENDENZA: Funzione sempre stabile
  };

  // =====================================================
  // üéÅ PROVIDER RENDER
  // =====================================================

  // üåê FORNISCI CONTEXT: Rende value disponibile a tutti i componenti figli
  return (
    <NotificationContext.Provider value={value}>
      {children}
    </NotificationContext.Provider>
  );
};

// =====================================================
// ü™ù CUSTOM HOOK PER CONSUMARE CONTEXT
// =====================================================

// üéØ HOOK PERSONALIZZATO: Accesso sicuro al notification context
export const useNotification = () => {
  // üîç OTTIENI CONTEXT VALUE
  const context = useContext(NotificationContext);

  // ‚ö†Ô∏è ERROR HANDLING: Verifica uso corretto
  if (!context) {
    // üí• ERRORE CRITICO: Hook usato fuori da Provider
    // PREVIENE: Bug sottili da uso scorretto del context
    throw new Error("useNotification must be used within NotificationProvider");
  }

  // ‚úÖ RETURN API: Context valido, restituisci tutte le funzioni
  return context;
};

// =====================================================
// üìã NOTE ARCHITETTURALI E PATTERN IMPLEMENTATI
// =====================================================

// üé® DESIGN PATTERNS UTILIZZATI:
// 1. CONTEXT PATTERN: Stato globale senza prop drilling
// 2. REDUCER PATTERN: Gestione stato immutabile e prevedibile
// 3. FACADE PATTERN: API semplice nasconde complessit√† interna
// 4. STRATEGY PATTERN: Diverse strategie per tipi di notifica
// 5. ERROR MAPPING PATTERN: Conversione errori tecnici ‚Üí user-friendly

// üîß OTTIMIZZAZIONI PERFORMANCE:
// 1. useCallback su tutte le funzioni per evitare re-render
// 2. Context separato da AppContext per isolamento updates
// 3. Auto-dismiss automatico per evitare memory leaks
// 4. Dipendenze minimali nei useCallback

// üéØ VANTAGGI ARCHITETTURA:
// 1. SEPARAZIONE: Notifiche isolate da logica business
// 2. RIUSABILIT√Ä: Hook utilizzabile in qualsiasi componente
// 3. CONSISTENZA: Stile uniforme per tutti i messaggi
// 4. MANUTENIBILIT√Ä: Mapping errori centralizzato
// 5. UX: Auto-dismiss e timing appropriati per tipo

// üîÆ POSSIBILI MIGLIORAMENTI FUTURI:
// 1. PERSISTENCE: Salva notifiche critiche in sessionStorage
// 2. STACKING: Gestione visuale di notifiche multiple
// 3. POSITIONING: Configurazione posizione toast
// 4. ACTIONS: Notifiche con bottoni di azione
// 5. SOUND: Feedback audio per notifiche importanti
// 6. ANALYTICS: Tracking interazioni utente con notifiche
