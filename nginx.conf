# =====================================================
# 🌐 nginx.conf - Configurazione Nginx per Production
# =====================================================
# SCOPO: Configurazione server web Nginx per servire l'app React in production
# Nginx è un server web ad alte performance che serve file statici e gestisce proxy

# COS'È NGINX:
# - Web server: Serve file HTML, CSS, JS, immagini
# - Reverse proxy: Inoltra richieste ad altri server
# - Load balancer: Distribuisce carico tra server
# - Cache: Memorizza risposte per migliorare performance
# Per app React: Serve file statici del build + gestisce routing

# ====== EVENTS BLOCK ======
events {
    worker_connections 1024;
    # SCOPO: Configurazione connessioni per worker process
    # COSA FA:
    # - Ogni worker Nginx può gestire 1024 connessioni simultanee
    # - Con worker_processes auto, capacità totale = CPU cores × 1024
    # - Controlla memory usage e performance
    # CALCOLO: 4 CPU cores × 1024 = 4096 connessioni simultanee max
    # PERCHÉ 1024: Bilanciamento tra performance e uso memoria
}

# ====== HTTP BLOCK ======
http {
    # ====== MIME TYPES ======
    include       /etc/nginx/mime.types;
    # SCOPO: Carica mapping estensioni file → Content-Type HTTP
    # COSA CONTIENE:
    # - .html → text/html
    # - .css → text/css  
    # - .js → application/javascript
    # - .jpg → image/jpeg
    # PERCHÉ: Browser ha bisogno Content-Type corretto per renderizzare
    
    default_type  application/octet-stream;
    # SCOPO: Content-Type default per file senza mapping
    # application/octet-stream: "Binary file" (download invece di render)
    # QUANDO: File con estensioni non riconosciute
    
    # ====== LOGGING CONFIGURATION ======
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    # SCOPO: Formato personalizzato per log accessi
    # VARIABILI:
    # - $remote_addr: IP client
    # - $remote_user: Username autenticato (se presente)
    # - $time_local: Timestamp richiesta
    # - $request: Metodo HTTP + URL + versione
    # - $status: Codice risposta HTTP (200, 404, etc.)
    # - $body_bytes_sent: Bytes inviati nel body
    # - $http_referer: Da quale pagina arriva l'utente
    # - $http_user_agent: Browser/client info
    # - $http_x_forwarded_for: IP reale se dietro proxy
    
    access_log /var/log/nginx/access.log main;
    # SCOPO: Registra tutte le richieste HTTP
    # DOVE: /var/log/nginx/access.log
    # FORMATO: main (definito sopra)
    # UTILITÀ: Analisi traffico, debugging, monitoring
    
    error_log /var/log/nginx/error.log warn;
    # SCOPO: Registra errori e warning
    # LIVELLI: debug, info, notice, warn, error, crit, alert, emerg
    # warn: Registra warning e errori più gravi
    # UTILITÀ: Debugging problemi configurazione/performance
    
    # ====== PERFORMANCE OPTIMIZATIONS ======
    sendfile on;
    # SCOPO: Ottimizzazione trasferimento file
    # COSA FA: Nginx invia file direttamente dal kernel (bypassa userspace)
    # BENEFIT: Meno CPU usage, maggiore throughput
    # IDEALE: Per servire file statici (HTML, CSS, JS, immagini)
    
    tcp_nopush on;
    # SCOPO: Ottimizza invio pacchetti TCP
    # COSA FA: Accumula dati prima di inviare (meno pacchetti)
    # BENEFIT: Riduce overhead rete, migliora throughput
    # RICHIEDE: sendfile on
    
    tcp_nodelay on;
    # SCOPO: Disabilita algoritmo Nagle per connessioni keep-alive
    # COSA FA: Invia dati immediatamente senza buffer
    # BENEFIT: Riduce latenza per richieste small/frequent
    # BILANCIAMENTO: tcp_nopush (throughput) vs tcp_nodelay (latenza)
    
    keepalive_timeout 65;
    # SCOPO: Mantiene connessioni TCP aperte per richieste multiple
    # VALORE: 65 secondi
    # BENEFIT: Evita overhead connessione/disconnessione
    # TRADE-OFF: Memoria vs performance
    
    types_hash_max_size 2048;
    # SCOPO: Dimensione hash table per MIME types
    # COSA FA: Ottimizza lookup estensione → Content-Type
    # VALORE: 2048 buckets
    # BENEFIT: Lookup veloci per file types
    
    # ====== COMPRESSION ======
    gzip on;
    # SCOPO: Abilita compressione gzip per risposte HTTP
    # BENEFIT: Riduce bandwidth, tempi caricamento
    # SUPPORTO: Tutti i browser moderni
    
    gzip_vary on;
    # SCOPO: Aggiunge header "Vary: Accept-Encoding"
    # COSA FA: Dice ai proxy/cache di considerare Accept-Encoding
    # PERCHÉ: Evita servire contenuto gzip a client non compatibili
    
    gzip_min_length 1024;
    # SCOPO: Comprime solo file > 1024 bytes
    # RAGIONE: File piccoli potrebbero aumentare di dimensione
    # OVERHEAD: Compressione ha costo CPU
    
    gzip_proxied any;
    # SCOPO: Comprime risposte per richieste proxied
    # VALORE: any (qualsiasi richiesta proxy)
    # UTILE: Se app dietro load balancer/CDN
    
    gzip_comp_level 6;
    # SCOPO: Livello compressione (1-9)
    # VALORE: 6 (bilanciamento CPU vs compressione)
    # TRADE-OFF: Livello alto = più compressione ma più CPU
    
    gzip_types
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml
        text/css
        text/javascript
        text/xml
        text/plain;
    # SCOPO: Tipi MIME da comprimere
    # NOTA: text/html sempre compresso automaticamente
    # SCELTA: File testuali (comprimibili), non binari (già compressi)

    # ====== SERVER BLOCK ======
    server {
        listen 80;
        # SCOPO: Ascolta richieste HTTP sulla porta 80
        # PORTA 80: Standard HTTP (non HTTPS)
        # PRODUZIONE: Dovresti usare HTTPS (porta 443)
        
        server_name localhost;
        # SCOPO: Nome server per virtual hosting
        # VALORE: localhost (per container Docker)
        # PRODUZIONE: Sostituisci con dominio reale (example.com)
        
        root /usr/share/nginx/html;
        # SCOPO: Directory root per file statici
        # PATH: /usr/share/nginx/html (standard Docker nginx)
        # CONTENUTO: File build React (HTML, CSS, JS)
        
        index index.html;
        # SCOPO: File default quando richiesta directory
        # ESEMPIO: GET / → serve /usr/share/nginx/html/index.html
        
        # ====== SECURITY HEADERS ======
        add_header X-Frame-Options "SAMEORIGIN" always;
        # SCOPO: Previene clickjacking attacks
        # SAMEORIGIN: Può essere embedded solo da stesso dominio
        # ALTERNATIVE: DENY (mai), ALLOW-FROM uri (dominio specifico)
        
        add_header X-Content-Type-Options "nosniff" always;
        # SCOPO: Previene MIME type sniffing
        # COSA FA: Browser usa Content-Type header, non guess
        # SICUREZZA: Previene execution di file come script
        
        add_header X-XSS-Protection "1; mode=block" always;
        # SCOPO: Abilita XSS protection in browser
        # VALORE: 1 (abilita), mode=block (blocca pagina)
        # NOTA: Deprecato, usa Content-Security-Policy
        
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # SCOPO: Controlla Referer header in richieste
        # VALORE: Invia referer solo per same-origin, solo origin per cross-origin
        # PRIVACY: Riduce informazioni leaked
        
        # ====== REACT ROUTER HANDLING ======
        location / {
            try_files $uri $uri/ /index.html;
            # SCOPO: Gestisce client-side routing di React
            # LOGICA:
            # 1. Prova file esatto ($uri)
            # 2. Prova directory ($uri/)
            # 3. Fallback a index.html
            # PERCHÉ: React Router gestisce routing client-side
            # ESEMPIO: GET /about → serve index.html → React Router mostra About
        }
        
        # ====== STATIC ASSETS CACHING ======
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            # SCOPO: Cache file statici per 1 anno
            # RAGIONE: File hanno hash nel nome, cambiano URL quando cambiano
            # ESEMPIO: main.abc123.js → main.def456.js
            
            add_header Cache-Control "public, immutable";
            # SCOPO: Ottimizza caching
            # public: Può essere cached da proxy/CDN
            # immutable: File non cambia mai (safe per cache aggressivo)
            # BENEFIT: Caricamenti istantanei per utenti return
        }
        
        # ====== HEALTH CHECK ======
        location /health {
            access_log off;
            # SCOPO: Non logga richieste health check
            # PERCHÉ: Evita spam nei log da monitoring
            
            return 200 "healthy\n";
            # SCOPO: Risposta semplice per health check
            # VALORE: Status 200 + testo "healthy"
            # USO: Docker health check, load balancer monitoring
            
            add_header Content-Type text/plain;
            # SCOPO: Specifica Content-Type per risposta
            # VALORE: text/plain (testo semplice)
        }
        
        # ====== SECURITY ======
        server_tokens off;
        # SCOPO: Nasconde versione Nginx in header/error pages
        # SICUREZZA: Riduce information disclosure
        # ESEMPIO: Server: nginx → Server: nginx (senza versione)
    }
}

# ====== COME FUNZIONA IL FLUSSO ======
# 1. CLIENT REQUEST:
#    - Browser richiede https://myapp.com/dashboard
#    - Nginx riceve richiesta su porta 80
#
# 2. NGINX PROCESSING:
#    - Controlla location blocks
#    - Match location / (catch-all)
#    - Esegue try_files
#
# 3. FILE SERVING:
#    - Prova /usr/share/nginx/html/dashboard (non esiste)
#    - Prova /usr/share/nginx/html/dashboard/ (non esiste)
#    - Fallback a /usr/share/nginx/html/index.html
#
# 4. RESPONSE:
#    - Serve index.html con headers security
#    - React Router in browser gestisce /dashboard
#    - Mostra componente Dashboard
#
# 5. STATIC ASSETS:
#    - Browser richiede CSS/JS referenziati in index.html
#    - Nginx li serve con cache headers (1 anno)
#    - Compressi con gzip per performance

# ====== OPTIMIZATIONS PER PRODUCTION ======
# 🔒 HTTPS: Aggiungi SSL/TLS configuration
# 🚀 HTTP/2: Abilita per performance
# 🛡️ CSP: Content Security Policy headers
# 📊 RATE LIMITING: Proteggi da abuse
# 🗜️ BROTLI: Compressione migliore di gzip
# 🎯 LOCATION BLOCKS: Più specifici per diverse routes

# ====== MONITORING & DEBUGGING ======
# 📊 METRICS: Esporta metriche Nginx
# 🔍 LOGGING: Struttura log per analisi
# 🚨 ALERTING: Monitor status codes, response times
# 📈 PERFORMANCE: Tune worker processes, connections